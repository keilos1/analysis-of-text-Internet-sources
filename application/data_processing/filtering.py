# Фильтрация данных по тематике и местоположению
import re
from typing import List, Dict, Optional
from enum import Enum
import asyncio
import sys
sys.path.append("../")
from data_collection.sheduler import DataUpdater

class NewsCategory(Enum):
    CULTURE = "Культура"
    SPORT = "Спорт"
    TECHNOLOGY = "Технологии"
    HOLIDAYS = "Праздники"
    EDUCATION = "Образование"

# Только районы Петрозаводска
PETROZAVODSK_DISTRICTS = [
    "Голиковка", "Древлянка", "Зарека",
    "Ключевая", "Кукковка", "Октябрьский",
    "Первомайский", "Перевалка", "Пески",
    "Рыбка", "Центр", "Южная площадка"
]

CATEGORY_KEYWORDS = {
    NewsCategory.CULTURE: [
        "культур", "музей", "театр", "выставк", "галерея", "концерт", 
        "фестивал", "арт", "худож", "кино", "спектакл", "творчеств", 
        "литератур", "поэз", "проз", "чтения", "библиотек", "архитектур",
        "реставрац", "памятник", "искусств", "народн", "фольклор", "ремесл",
        "оркестр", "хор", "танц", "балет", "опер", "драм", "цирк"
    ],
    NewsCategory.SPORT: [
        "спорт", "футбол", "хоккей", "баскетбол", "волейбол", "теннис", 
        "плавание", "легкая атлетика", "лыж", "биатлон", "бокс", "единоборств",
        "турнир", "соревнован", "чемпионат", "олимпиад", "матч", "тренер",
        "спортсмен", "разряд", "медал", "пьедестал", "побед", "поражен",
        "стадион", "арен", "зал", "фитнес", "кросс", "марафон", "велосипед",
        "гимнастик", "коньк", "сноуборд", "скалолазание", "шахмат", "шашек"
    ],
    NewsCategory.TECHNOLOGY: [
        "технолог", "инновац", "IT", "компьютер", "программ", "приложен", 
        "стартап", "гаджет", "робот", "искуственный интеллект", "AI", 
        "виртуальная реальность", "VR", "дополненная реальность", "AR",
        "блокчейн", "криптовалют", "биткоин", "нейросет", "данн", "аналитик",
        "кибербезопасност", "хакер", "интернет", "сет", "сервер", "облачн",
        "мобильн", "смартфон", "планшет", "ноутбук", "чип", "процессор",
        "разработк", "код", "алгоритм", "автоматизац", "3D печать", "дрон",
        "электромобил", "тесла", "космос", "спутник", "нанотехнолог"
    ],
    NewsCategory.HOLIDAYS: [
        "праздник", "день города", "фестивал", "карнавал", "маслен", "новый год",
        "рождеств", "пасх", "8 марта", "23 февраля", "день победы", "9 мая",
        "день народного единства", "день росси", "день республик", "юбилей",
        "мероприят", "салют", "фейерверк", "концерт", "гулян", "ярмарк",
        "народные гуляния", "традиц", "обряд", "костюм", "декор", "украшен",
        "подарк", "поздравлен", "тост", "застоль", "шампанск", "салют"
    ],
    NewsCategory.EDUCATION: [
        "образован", "школ", "университет", "институт", "колледж", "училищ",
        "детский сад", "педагог", "учител", "преподавател", "студент", "учен",
        "абитуриент", "ЕГЭ", "ОГЭ", "экзамен", "зачет", "сесси", "лекц",
        "семинар", "конференц", "олимпиад", "конкурс", "исследован", "наук",
        "академи", "лаборатор", "курс", "тренинг", "репетитор", "учебник",
        "программ", "методик", "факультет", "кафедр", "диплом", "дистанционное обучение",
        "онлайн-курс", "повышение квалификации", "аспирант", "доктор наук", "кандидат наук",
        "защита диссертац", "грамот", "медал", "стипенди", "общежити"
    ],
    # Можно добавить дополнительные категории при необходимости
}

class NewsProcessor:
    def __init__(self):
        self.data_updater = DataUpdater()
        # Регулярное выражение для поиска всех форм слова "Петрозаводск"
        self.petrozavodsk_pattern = re.compile(
            r'\bПетрозаводск(?:а|у|ом|е|ий|ого|ому|им|ом)?\b',
            re.IGNORECASE
        )

    async def process_news(self) -> List[Dict]:
        """
        Получает новости через fetch_news и обрабатывает их:
        - Оставляет только новости о Петрозаводске (с учетом разных форм слова)
        - Добавляет информацию о локации и категориях
        """
        raw_news = await self.data_updater.fetch_news()
        processed_news = []

        # Проверка на отсутствие новостей
        if not raw_news:
            print("Новостей нет")
            return processed_news

        petrozavodsk_news_count = 0

        for news_item in raw_news:
            text = news_item.get("text", "")
            text_lower = text.lower()

            # Проверка на принадлежность к Петрозаводску (все формы слова)
            if not self.petrozavodsk_pattern.search(text):
                continue

            petrozavodsk_news_count += 1

            # Определение категорий
            detected_categories = []
            for category, keywords in CATEGORY_KEYWORDS.items():
                if any(keyword in text_lower for keyword in keywords):
                    detected_categories.append(category.value)

            # Определение района
            location = {"city": "Петрозаводск"}
            for district in PETROZAVODSK_DISTRICTS:
                if re.search(rf'\b{re.escape(district)}\b', text, re.IGNORECASE):
                    location["district"] = district
                    break

            # Вывод в консоль
            print("Title:", news_item.get("title", ""))
            print("Text:", text)
            print("Categories:", detected_categories or ["Другое"])
            print("District:", location.get("district", "Не указан"))
            print("-" * 50)

            processed_news.append({
                **news_item,
                "location": location,
                "categories": detected_categories or ["Другое"]
            })

        # Проверка, что после фильтрации остались новости
        if petrozavodsk_news_count == 0:
            print("Новостей о Петрозаводске нет")

        return processed_news

if __name__ == "__main__":
    async def main():
        processor = NewsProcessor()
        await processor.process_news()
    
    asyncio.run(main())
